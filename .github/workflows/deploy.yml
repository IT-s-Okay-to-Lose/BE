name: (dev) CI/CD Deploy to EC2

on:
  push:
    branches: [ dev ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Decode env file
        run: echo "${{ secrets.ENV_PROPERTIES_DEV }}" | base64 --decode > .env

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Build Docker image
        run: docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/iotl:${{ github.sha }} .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" \
          | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/iotl:${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "📂 이동 및 git pull"
            cd ~/BE
            git reset --hard
            git pull origin dev

            echo "🔐 환경파일 복원"
            echo "${{ secrets.ENV_PROPERTIES_DEV }}" | base64 --decode > .env

            echo "🐳 Docker 이미지 Pull 및 재시작"
            docker pull ${{ secrets.DOCKER_USERNAME }}/iotl:${{ github.sha }}
            docker stop iotl || true
            docker rm iotl || true

            echo "✅ Starting new container..."
            docker run -d \
              --env-file .env \
              -p 8080:8080 \
              --name iotl \
              ${{ secrets.DOCKER_USERNAME }}/iotl:${{ github.sha }} \
              java -jar app.jar

            echo "✅ Running containers:"
            docker ps | grep iotl

            echo "🧹 Cleaning up unused images..."
            docker image prune -af --filter "until=24h"

      - name: Slack Notification (Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ [dev 배포 성공] dev 브랜치가 성공적으로 배포되었습니다."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack Notification (Failure)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ [dev 배포 실패] 문제가 발생했습니다. 로그를 확인해주세요."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}