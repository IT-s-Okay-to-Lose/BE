name: (TEST) CI/CD Deploy to EC2

on:
  push:
    branches: [ test ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make env.test file for TEST
        run: |
          echo "$ENV_PROPERTIES_TEST" > .env.test
        env:
          ENV_PROPERTIES_TEST: ${{ secrets.ENV_PROPERTIES_TEST }}

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Build Docker image
        run: docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/iotl-test:${{ github.sha }} .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/iotl-test:${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          ENV_PROPERTIES_TEST: ${{ secrets.ENV_PROPERTIES_TEST }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: |
            ENV_PROPERTIES_TEST
          script: |
            set -e
  
            echo "📂 ~/BE 로 이동 및 test 브랜치 동기화"
            cd ~/BE
            git fetch origin test
            git reset --hard origin/test
  
            echo "🔐 .env.test 덮어쓰기"
            echo "$ENV_PROPERTIES_TEST" > ~/BE/.env.test
  
            echo "🐳 Docker 이미지 Pull 및 재시작"
            docker pull ${{ secrets.DOCKER_USERNAME }}/iotl-test:${{ github.sha }}
            docker stop iotl-test || true
            docker rm iotl-test   || true
  
            echo "🚀 새 컨테이너 시작"
            docker run -d \
              --network iotl-net \
              --env-file ~/BE/.env.test \
              -p 8081:8080 \
              --name iotl-test \
              ${{ secrets.DOCKER_USERNAME }}/iotl-test:${{ github.sha }} \
              java -jar app.jar
  
            echo "✅ 컨테이너 상태:"
            docker ps | grep iotl-test
  
            # 컨테이너가 살아 있는지 체크
            if ! docker ps --filter "name=iotl-test" --filter "status=running" | grep -q iotl-test; then
              echo "❌ 컨테이너가 실행 중이지 않습니다. 배포 실패" >&2
              exit 1
            fi
  
            echo "🧹 오래된 이미지 정리"
            docker image prune -af --filter "until=24h"

      - name: ✅ 컨테이너 기동 확인
        if: always()
        run: |
          if ! docker ps --filter "name=iotl-test" --filter "status=running" | grep -q iotl-test; then
            echo "❌ 컨테이너가 실행 중이지 않습니다. 배포 실패" >&2
            exit 1
          fi
          
          echo "🧹 오래된 이미지 정리"
            docker image prune -af --filter "until=24h"

      - name: Send Slack Notification (Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ [테스트 배포 성공] test 브랜치가 성공적으로 배포되었습니다."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification (Failure)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ [테스트 배포 실패] 문제가 발생했습니다. 로그를 확인해주세요."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}