name: (TEST) CI/CD Deploy to EC2

on:
  push:
    branches: [ test ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make env.test file for TEST
        run: echo "$ENV_PROPERTIES_TEST" | base64 --decode > .env.test
        env:
          ENV_PROPERTIES_TEST: ${{ secrets.ENV_PROPERTIES_TEST }}

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Build Docker image
        run: docker build --no-cache -t ${{ secrets.DOCKER_USERNAME }}/iotl-test:${{ github.sha }} .

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/iotl-test:${{ github.sha }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          ENV_PROPERTIES_TEST: ${{ secrets.ENV_PROPERTIES_TEST }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ENV_PROPERTIES_TEST
          script: |
            set -e

            echo "📂 이동 및 git pull"
            cd ~/BE
            git reset --hard
            git pull origin test

            echo "$ENV_PROPERTIES_TEST" > .env
            export $(grep -v '^#' .env | xargs) # env export
            
            echo "📦 Flyway Migration 실행"
            export $(grep -v '^#' .env | xargs)
            
            flyway migrate \
            -locations=filesystem:./src/main/resources/db/migration \
            -url=$SPRING_DATASOURCE_URL \
            -user=$SPRING_DATASOURCE_USERNAME \
            -password=$SPRING_DATASOURCE_PASSWORD \
            -baselineOnMigrate=true
            
            echo "🐳 Docker 이미지 Pull 및 재시작"
            docker pull ${{ secrets.DOCKER_USERNAME }}/iotl-test:${{ github.sha }}
            docker stop iotl-test || true
            docker rm iotl-test || true

            echo "✅ Starting new container..."
            docker run -d \
              --env-file .env \
              -e SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} \
              -e SENTRY_DSN=${{ secrets.SENTRY_DSN }} \
              -p 8081:8080 \
              --name iotl-test \
              ${{ secrets.DOCKER_USERNAME }}/iotl-test:${{ github.sha }} \
              java -javaagent:sentry-opentelemetry-agent-8.14.0.jar -jar app.jar     

            echo "✅ Running containers:"
            docker ps | grep iotl-test

            echo "🧹 Cleaning up unused images..."
            docker image prune -af --filter "until=24h"

      - name: Send Slack Notification (Success)
        if: success()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"✅ [테스트 배포 성공] GitHub Actions에서 test 브랜치가 성공적으로 배포되었습니다."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Slack Notification (Failure)
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text":"❌ [테스트 배포 실패] GitHub Actions에서 문제가 발생했습니다. 로그를 확인해주세요."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
